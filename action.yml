name: "Setup OCI NSG"
description: "Deploy and destroy Terraform infrastructure with OCI provider and S3 backend"
branding:
  icon: "cloud"
  color: "blue"

inputs:
  # AWS S3 Backend Configuration
  aws-access-key-id:
    description: "AWS Access Key ID for S3 backend"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key for S3 backend"
    required: true
  aws-region:
    description: "AWS region for S3 backend"
    required: false
    default: "ap-southeast-1"
  backend-key:
    description: "S3 backend key path (defaults to repository name)"
    required: false
    default: "${{ github.repository }}/terraform.tfstate"

  # Terraform Configuration
  terraform-version:
    description: "Terraform version to use"
    required: false
    default: "1.13.0"
  terraform-working-directory:
    description: "Directory containing Terraform files in the action repository"
    required: false
    default: "."
  auto-destroy:
    description: "Whether to automatically destroy resources after apply"
    required: false
    default: "false"
  apply-infrastructure:
    description: "Whether to apply infrastructure changes"
    required: false
    default: "true"

outputs:
  runner-ip:
    description: "Public IP address of the GitHub Actions runner"
    value: ${{ steps.get-ip.outputs.ipv4 }}
  terraform-output:
    description: "Terraform output in JSON format"
    value: ${{ steps.output.outputs.stdout }}

runs:
  using: "composite"
  steps:
    # Checkout the action's repository (contains Terraform files)
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: cloudware-com-kh/setup-oci-nsg
        ref: v1.0.5

    # Configure AWS credentials for S3 backend
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false

    # Get runner's public IP
    - name: Get Runner's Public IP
      id: get-ip
      shell: bash
      run: |
        PUBLIC_IP=$(curl -s 'https://api.ipify.org')
        echo "ipv4=$PUBLIC_IP" >> $GITHUB_OUTPUT
        echo "Runner IP: $PUBLIC_IP"

    # Initialize Terraform
    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.terraform-working-directory }}
      run: terraform init -backend-config="key=${{ inputs.backend-key }}"
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}

    # Apply Terraform changes
    - name: Terraform Apply
      if: ${{ inputs.apply-infrastructure == 'true' }}
      shell: bash
      working-directory: ${{ inputs.terraform-working-directory }}
      run: terraform apply -auto-approve -input=false
      env:
        # OCI Provider Environment Variables
        OCI_CLI_USER: ${{ env.OCI_USER_ID }}
        OCI_CLI_TENANCY: ${{ env.OCI_TENANCY_ID }}
        OCI_CLI_FINGERPRINT: ${{ env.OCI_FINGERPRINT }}
        OCI_CLI_KEY_CONTENT: ${{ env.OCI_PRIVATE_KEY }}
        OCI_CLI_REGION: ${{ env.OCI_REGION }}
        # Terraform Variables
        TF_VAR_tenancy_id: ${{ env.OCI_TENANCY_ID }}
        TF_VAR_user_id: ${{ env.OCI_USER_ID }}
        TF_VAR_region: ${{ env.OCI_REGION }}
        TF_VAR_compartment_id: ${{ env.OCI_COMPARTMENT_ID }}
        TF_VAR_nsg_id: ${{ env.OCI_NSG_ID }}
        TF_VAR_api_fingerprint: ${{ env.OCI_FINGERPRINT }}
        TF_VAR_api_private_key: ${{ env.OCI_PRIVATE_KEY }}
        TF_VAR_ingress_cidr: ${{ steps.get-ip.outputs.ipv4 }}/32

    # Destroy infrastructure if auto-destroy is enabled
    - name: Terraform Destroy
      if: ${{ inputs.auto-destroy == 'true' }}
      shell: bash
      working-directory: ${{ inputs.terraform-working-directory }}
      run: terraform destroy -auto-approve -input=false
      env:
        # OCI Provider Environment Variables
        OCI_CLI_USER: ${{ env.OCI_USER_ID }}
        OCI_CLI_TENANCY: ${{ env.OCI_TENANCY_ID }}
        OCI_CLI_FINGERPRINT: ${{ env.OCI_FINGERPRINT }}
        OCI_CLI_KEY_CONTENT: ${{ env.OCI_PRIVATE_KEY }}
        OCI_CLI_REGION: ${{ env.OCI_REGION }}
        # Terraform Variables
        TF_VAR_tenancy_id: ${{ env.OCI_TENANCY_ID }}
        TF_VAR_user_id: ${{ env.OCI_USER_ID }}
        TF_VAR_region: ${{ env.OCI_REGION }}
        TF_VAR_compartment_id: ${{ env.OCI_COMPARTMENT_ID }}
        TF_VAR_nsg_id: ${{ env.OCI_NSG_ID }}
        TF_VAR_api_fingerprint: ${{ env.OCI_FINGERPRINT }}
        TF_VAR_api_private_key: ${{ env.OCI_PRIVATE_KEY }}
        TF_VAR_ingress_cidr: ${{ steps.get-ip.outputs.ipv4 }}/32
    - name: Reset Checkout
      uses: actions/checkout@v4
